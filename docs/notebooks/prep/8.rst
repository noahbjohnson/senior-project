
Education Data Processing (WDI)
===============================

Data Dictionary
---------------

+-------------+--------------------------------------------------------+
| Code        | Indicator Name                                         |
+=============+========================================================+
| SE.ENR.PRSC | School enrollment, primary and secondary (gross),      |
| .FM.ZS      | gender parity index (GPI)                              |
+-------------+--------------------------------------------------------+
| SE.ADT.LITR | Literacy rate, adult total (% of people ages 15 and    |
| .ZS         | above)                                                 |
+-------------+--------------------------------------------------------+
| SE.COM.DURS | Compulsory education, duration (years)                 |
+-------------+--------------------------------------------------------+
| SE.PRM.UNER | Children out of school (% of primary school age)       |
| .ZS         |                                                        |
+-------------+--------------------------------------------------------+
| SE.PRM.ENRL | Pupil-teacher ratio, primary                           |
| .TC.ZS      |                                                        |
+-------------+--------------------------------------------------------+
| SE.SEC.ENRL | Pupil-teacher ratio, secondary                         |
| .TC.ZS      |                                                        |
+-------------+--------------------------------------------------------+
| SE.SEC.NENR | School enrollment, secondary (% net)                   |
+-------------+--------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Education/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>School enrollment, primary and secondary (gross), gender parity index (GPI) [SE.ENR.PRSC.FM.ZS]</th>
          <th>Literacy rate, adult total (% of people ages 15 and above) [SE.ADT.LITR.ZS]</th>
          <th>Compulsory education, duration (years) [SE.COM.DURS]</th>
          <th>Children out of school (% of primary school age) [SE.PRM.UNER.ZS]</th>
          <th>Pupil-teacher ratio, primary [SE.PRM.ENRL.TC.ZS]</th>
          <th>Pupil-teacher ratio, secondary [SE.SEC.ENRL.TC.ZS]</th>
          <th>School enrollment, secondary (% net) [SE.SEC.NENR]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1808</th>
          <td>2001</td>
          <td>YR2001</td>
          <td>Euro area</td>
          <td>EMU</td>
          <td>1.000</td>
          <td>98.376</td>
          <td>10</td>
          <td>1.607</td>
          <td>14.379</td>
          <td>11.779</td>
          <td>86.816</td>
        </tr>
        <tr>
          <th>3346</th>
          <td>2007</td>
          <td>YR2007</td>
          <td>Slovak Republic</td>
          <td>SVK</td>
          <td>1.005</td>
          <td>..</td>
          <td>10</td>
          <td>..</td>
          <td>15.347</td>
          <td>12.813</td>
          <td>86.585</td>
        </tr>
        <tr>
          <th>5288</th>
          <td>2015</td>
          <td>YR2015</td>
          <td>Italy</td>
          <td>ITA</td>
          <td>0.983</td>
          <td>..</td>
          <td>12</td>
          <td>0.958</td>
          <td>12.027</td>
          <td>11.293</td>
          <td>96.415</td>
        </tr>
        <tr>
          <th>1522</th>
          <td>2000</td>
          <td>YR2000</td>
          <td>Turks and Caicos Islands</td>
          <td>TCA</td>
          <td>..</td>
          <td>..</td>
          <td>13</td>
          <td>..</td>
          <td>..</td>
          <td>8.377</td>
          <td>..</td>
        </tr>
        <tr>
          <th>1178</th>
          <td>1999</td>
          <td>YR1999</td>
          <td>Libya</td>
          <td>LBY</td>
          <td>..</td>
          <td>..</td>
          <td>9</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SE.ENR.PRSC.FM.ZS</th>
          <th>SE.ADT.LITR.ZS</th>
          <th>SE.COM.DURS</th>
          <th>SE.PRM.UNER.ZS</th>
          <th>SE.PRM.ENRL.TC.ZS</th>
          <th>SE.SEC.ENRL.TC.ZS</th>
          <th>SE.SEC.NENR</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>GBR</th>
          <th>2017</th>
          <td>nan</td>
          <td>nan</td>
          <td>11.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>THA</th>
          <th>2011</th>
          <td>1.029</td>
          <td>nan</td>
          <td>9.000</td>
          <td>nan</td>
          <td>15.785</td>
          <td>19.907</td>
          <td>79.459</td>
        </tr>
        <tr>
          <th>IRN</th>
          <th>2001</th>
          <td>0.944</td>
          <td>nan</td>
          <td>5.000</td>
          <td>nan</td>
          <td>25.324</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>DJI</th>
          <th>2001</th>
          <td>0.711</td>
          <td>nan</td>
          <td>10.000</td>
          <td>70.286</td>
          <td>nan</td>
          <td>nan</td>
          <td>14.172</td>
        </tr>
        <tr>
          <th>PSE</th>
          <th>1999</th>
          <td>1.012</td>
          <td>nan</td>
          <td>10.000</td>
          <td>9.647</td>
          <td>37.765</td>
          <td>25.096</td>
          <td>73.203</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Education_WDI.pickle")
