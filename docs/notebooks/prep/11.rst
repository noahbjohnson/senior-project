
General Indicators Data Processing (WDI)
========================================

Data Dictionary
---------------

+----------+-----------------------------------------------------------+
| **Code** | **Indicator Name**                                        |
+==========+===========================================================+
| SP.DYN.L | Life expectancy at birth, total (years)                   |
| E00.IN   |                                                           |
+----------+-----------------------------------------------------------+
| EG.ELC.A | Access to electricity (% of population)                   |
| CCS.ZS   |                                                           |
+----------+-----------------------------------------------------------+
| SH.STA.H | People with basic handwashing facilities including soap   |
| YGN.ZS   | and water (% of population)                               |
+----------+-----------------------------------------------------------+
| SH.H2O.S | People using safely managed drinking water services (% of |
| MDW.ZS   | population)                                               |
+----------+-----------------------------------------------------------+
| SH.H2O.B | People using at least basic drinking water services (% of |
| ASW.ZS   | population)                                               |
+----------+-----------------------------------------------------------+
| EN.ATM.C | CO2 emissions (metric tons per capita)                    |
| O2E.PC   |                                                           |
+----------+-----------------------------------------------------------+
| EN.CO2.T | CO2 emissions from transport (% of total fuel combustion) |
| RAN.ZS   |                                                           |
+----------+-----------------------------------------------------------+
| ER.LND.P | Terrestrial protected areas (% of total land area)        |
| TLD.ZS   |                                                           |
+----------+-----------------------------------------------------------+
| DT.DOD.P | Present value of external debt (% of GNI)                 |
| VLX.GN.Z |                                                           |
| S        |                                                           |
+----------+-----------------------------------------------------------+
| FB.ATM.T | Automated teller machines (ATMs) (per 100,000 adults)     |
| OTL.P5   |                                                           |
+----------+-----------------------------------------------------------+
| FB.CBK.B | Commercial bank branches (per 100,000 adults)             |
| RCH.P5   |                                                           |
+----------+-----------------------------------------------------------+
| FB.CBK.D | Depositors with commercial banks (per 1,000 adults)       |
| PTR.P3   |                                                           |
+----------+-----------------------------------------------------------+
| FB.CBK.B | Borrowers from commercial banks (per 1,000 adults)        |
| RWR.P3   |                                                           |
+----------+-----------------------------------------------------------+
| SG.VAW.1 | Proportion of women subjected to physical and/or sexual   |
| 549.ZS   | violence in the last 12 months (% of women age 15-49)     |
+----------+-----------------------------------------------------------+
| SG.DMK.A | Women participating in the three decisions (own health    |
| LLD.FN.Z | care, major household purchases, and visiting family) (%  |
| S        | of women age 15-49)                                       |
+----------+-----------------------------------------------------------+
| SG.DMK.S | Women making their own informed decisions regarding       |
| RCR.FN.Z | sexual relations, contraceptive use and reproductive      |
| S        | health care (% of women age 15-49)                        |
+----------+-----------------------------------------------------------+
| SH.STA.S | Suicide mortality rate (per 100,000 population)           |
| UIC.P5   |                                                           |
+----------+-----------------------------------------------------------+
| SH.STA.W | Mortality rate attributed to unsafe water, unsafe         |
| ASH.P5   | sanitation and lack of hygiene (per 100,000 population)   |
+----------+-----------------------------------------------------------+
| SP.DYN.I | Mortality rate, infant (per 1,000 live births)            |
| MRT.IN   |                                                           |
+----------+-----------------------------------------------------------+
| SH.STA.B | Low-birthweight babies (% of births)                      |
| RTW.ZS   |                                                           |
+----------+-----------------------------------------------------------+
| SH.ANM.C | Prevalence of anemia among children (% of children under  |
| HLD.ZS   | 5)                                                        |
+----------+-----------------------------------------------------------+
| SH.STA.A | Pregnant women receiving prenatal care (%)                |
| NVC.ZS   |                                                           |
+----------+-----------------------------------------------------------+
| SH.STA.F | Female genital mutilation prevalence (%)                  |
| GMS.ZS   |                                                           |
+----------+-----------------------------------------------------------+
| SH.PRV.S | Smoking prevalence, total (ages 15+)                      |
| MOK      |                                                           |
+----------+-----------------------------------------------------------+
| SH.ALC.P | Total alcohol consumption per capita (liters of pure      |
| CAP.LI   | alcohol, projected estimates, 15+ years of age)           |
+----------+-----------------------------------------------------------+
| IT.NET.B | Fixed broadband subscriptions (per 100 people)            |
| BND.P2   |                                                           |
+----------+-----------------------------------------------------------+
| IT.NET.U | Individuals using the Internet (% of population)          |
| SER.ZS   |                                                           |
+----------+-----------------------------------------------------------+
| IT.CEL.S | Mobile cellular subscriptions (per 100 people)            |
| ETS.P2   |                                                           |
+----------+-----------------------------------------------------------+
| SM.POP.R | Refugee population by country or territory of origin      |
| EFG.OR   |                                                           |
+----------+-----------------------------------------------------------+
| per_si_a | Coverage of social insurance programs (% of population)   |
| llsi.cov |                                                           |
| _pop_tot |                                                           |
+----------+-----------------------------------------------------------+
| VC.IHR.P | Intentional homicides (per 100,000 people)                |
| SRC.P5   |                                                           |
+----------+-----------------------------------------------------------+
| MS.MIL.T | Armed forces personnel (% of total labor force)           |
| OTL.TF.Z |                                                           |
| S        |                                                           |
+----------+-----------------------------------------------------------+
| HD.HCI.O | Human capital index (HCI) (scale 0-1)                     |
| VRL      |                                                           |
+----------+-----------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/General Indicators/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>Life expectancy at birth, total (years) [SP.DYN.LE00.IN]</th>
          <th>Access to electricity (% of population) [EG.ELC.ACCS.ZS]</th>
          <th>People with basic handwashing facilities including soap and water (% of population) [SH.STA.HYGN.ZS]</th>
          <th>People using safely managed drinking water services (% of population) [SH.H2O.SMDW.ZS]</th>
          <th>People using at least basic drinking water services (% of population) [SH.H2O.BASW.ZS]</th>
          <th>CO2 emissions (metric tons per capita) [EN.ATM.CO2E.PC]</th>
          <th>...</th>
          <th>Smoking prevalence, total (ages 15+) [SH.PRV.SMOK]</th>
          <th>Total alcohol consumption per capita (liters of pure alcohol, projected estimates, 15+ years of age) [SH.ALC.PCAP.LI]</th>
          <th>Fixed broadband subscriptions (per 100 people) [IT.NET.BBND.P2]</th>
          <th>Individuals using the Internet (% of population) [IT.NET.USER.ZS]</th>
          <th>Mobile cellular subscriptions (per 100 people) [IT.CEL.SETS.P2]</th>
          <th>Refugee population by country or territory of origin [SM.POP.REFG.OR]</th>
          <th>Coverage of social insurance programs (% of population) [per_si_allsi.cov_pop_tot]</th>
          <th>Intentional homicides (per 100,000 people) [VC.IHR.PSRC.P5]</th>
          <th>Armed forces personnel (% of total labor force) [MS.MIL.TOTL.TF.ZS]</th>
          <th>Human capital index (HCI) (scale 0-1) [HD.HCI.OVRL]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1884</th>
          <td>2001</td>
          <td>YR2001</td>
          <td>Cayman Islands</td>
          <td>CYM</td>
          <td>..</td>
          <td>100</td>
          <td>..</td>
          <td>..</td>
          <td>96.125</td>
          <td>10.836</td>
          <td>...</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>39.246</td>
          <td>..</td>
          <td>..</td>
          <td>4.617</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>3789</th>
          <td>2008</td>
          <td>YR2008</td>
          <td>Ireland</td>
          <td>IRL</td>
          <td>80.095</td>
          <td>100</td>
          <td>..</td>
          <td>95.783</td>
          <td>97.698</td>
          <td>9.578</td>
          <td>...</td>
          <td>..</td>
          <td>..</td>
          <td>19.851</td>
          <td>65.340</td>
          <td>112.441</td>
          <td>7</td>
          <td>..</td>
          <td>1.114</td>
          <td>0.425</td>
          <td>..</td>
        </tr>
        <tr>
          <th>6231</th>
          <td>2017</td>
          <td>YR2017</td>
          <td>Qatar</td>
          <td>QAT</td>
          <td>78.331</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>..</td>
          <td>..</td>
          <td>9.721</td>
          <td>95.940</td>
          <td>151.127</td>
          <td>31</td>
          <td>..</td>
          <td>..</td>
          <td>1.114</td>
          <td>0.615</td>
        </tr>
        <tr>
          <th>416</th>
          <td>1995</td>
          <td>YR1995</td>
          <td>Papua New Guinea</td>
          <td>PNG</td>
          <td>60.418</td>
          <td>8.816</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>0.421</td>
          <td>...</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>0</td>
          <td>2000</td>
          <td>..</td>
          <td>..</td>
          <td>0.185</td>
          <td>..</td>
        </tr>
        <tr>
          <th>5466</th>
          <td>2014</td>
          <td>YR2014</td>
          <td>Suriname</td>
          <td>SUR</td>
          <td>71.138</td>
          <td>88.314</td>
          <td>67.778</td>
          <td>..</td>
          <td>94.685</td>
          <td>3.634</td>
          <td>...</td>
          <td>27.500</td>
          <td>..</td>
          <td>8.468</td>
          <td>40.080</td>
          <td>169.329</td>
          <td>17</td>
          <td>..</td>
          <td>..</td>
          <td>0.933</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 37 columns</p>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SP.DYN.LE00.IN</th>
          <th>EG.ELC.ACCS.ZS</th>
          <th>SH.STA.HYGN.ZS</th>
          <th>SH.H2O.SMDW.ZS</th>
          <th>SH.H2O.BASW.ZS</th>
          <th>EN.ATM.CO2E.PC</th>
          <th>EN.CO2.TRAN.ZS</th>
          <th>ER.LND.PTLD.ZS</th>
          <th>DT.DOD.PVLX.GN.ZS</th>
          <th>FB.ATM.TOTL.P5</th>
          <th>...</th>
          <th>SH.PRV.SMOK</th>
          <th>SH.ALC.PCAP.LI</th>
          <th>IT.NET.BBND.P2</th>
          <th>IT.NET.USER.ZS</th>
          <th>IT.CEL.SETS.P2</th>
          <th>SM.POP.REFG.OR</th>
          <th>per_si_allsi.cov_pop_tot</th>
          <th>VC.IHR.PSRC.P5</th>
          <th>MS.MIL.TOTL.TF.ZS</th>
          <th>HD.HCI.OVRL</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>BHR</th>
          <th>1995</th>
          <td>73.413</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>26.288</td>
          <td>9.219</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>...</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.346</td>
          <td>4.896</td>
          <td>71.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>7.761</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>MDG</th>
          <th>2006</th>
          <td>61.650</td>
          <td>15.450</td>
          <td>23.618</td>
          <td>nan</td>
          <td>41.777</td>
          <td>0.089</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.745</td>
          <td>...</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.007</td>
          <td>0.608</td>
          <td>5.540</td>
          <td>260.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>NLD</th>
          <th>2017</th>
          <td>81.561</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>11.244</td>
          <td>nan</td>
          <td>44.614</td>
          <td>...</td>
          <td>nan</td>
          <td>nan</td>
          <td>42.327</td>
          <td>93.197</td>
          <td>120.522</td>
          <td>34.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.450</td>
          <td>0.800</td>
        </tr>
        <tr>
          <th>BGR</th>
          <th>2002</th>
          <td>71.866</td>
          <td>100.000</td>
          <td>nan</td>
          <td>97.211</td>
          <td>99.743</td>
          <td>5.695</td>
          <td>13.721</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>...</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>9.080</td>
          <td>33.022</td>
          <td>2841.000</td>
          <td>nan</td>
          <td>3.242</td>
          <td>2.995</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>MOZ</th>
          <th>2005</th>
          <td>51.362</td>
          <td>11.848</td>
          <td>nan</td>
          <td>nan</td>
          <td>30.249</td>
          <td>0.087</td>
          <td>68.874</td>
          <td>nan</td>
          <td>nan</td>
          <td>2.186</td>
          <td>...</td>
          <td>20.900</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.854</td>
          <td>7.188</td>
          <td>104.000</td>
          <td>nan</td>
          <td>5.205</td>
          <td>0.114</td>
          <td>nan</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 33 columns</p>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/General_WDI.pickle")
