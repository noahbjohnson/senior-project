
Labor Data Processing (WDI/ILO)
===============================

Data Dictionary
---------------

+-----------------------------------+-----------------------------------+
| **Code**                          | **Indicator Name**                |
+===================================+===================================+
| SL.TLF.ACTI.1524.FE.ZS            | Labor force participation rate    |
|                                   | for ages 15-24, female (%)        |
|                                   | (modeled ILO estimate)            |
+-----------------------------------+-----------------------------------+
| SL.TLF.CACT.ZS                    | Labor force participation rate,   |
|                                   | total (% of total population ages |
|                                   | 15+) (modeled ILO estimate)       |
+-----------------------------------+-----------------------------------+
| SL.TLF.CACT.FM.ZS                 | Ratio of female to male labor     |
|                                   | force participation rate (%)      |
|                                   | (modeled ILO estimate)            |
+-----------------------------------+-----------------------------------+
| SL.TLF.0714.SW.TM                 | Average working hours of          |
|                                   | children, study and work, ages    |
|                                   | 7-14 (hours per week)             |
+-----------------------------------+-----------------------------------+
| SL.TLF.0714.WK.TM                 | Average working hours of          |
|                                   | children, working only, ages 7-14 |
|                                   | (hours per week)                  |
+-----------------------------------+-----------------------------------+
| SL.EMP.MPYR.ZS                    | Employers, total (% of total      |
|                                   | employment) (modeled ILO          |
|                                   | estimate)                         |
+-----------------------------------+-----------------------------------+
| SL.AGR.EMPL.ZS                    | Employment in agriculture (% of   |
|                                   | total employment) (modeled ILO    |
|                                   | estimate)                         |
+-----------------------------------+-----------------------------------+
| SL.IND.EMPL.ZS                    | Employment in industry (% of      |
|                                   | total employment) (modeled ILO    |
|                                   | estimate)                         |
+-----------------------------------+-----------------------------------+
| SL.SRV.EMPL.ZS                    | Employment in services (% of      |
|                                   | total employment) (modeled ILO    |
|                                   | estimate)                         |
+-----------------------------------+-----------------------------------+
| SL.ISV.IFRM.ZS                    | Informal employment (% of total   |
|                                   | non-agricultural employment)      |
+-----------------------------------+-----------------------------------+
| SL.UEM.TOTL.ZS                    | Unemployment, total (% of total   |
|                                   | labor force) (modeled ILO         |
|                                   | estimate)                         |
+-----------------------------------+-----------------------------------+
| SL.EMP.SELF.ZS                    | Self-employed, total (% of total  |
|                                   | employment) (modeled ILO          |
|                                   | estimate)                         |
+-----------------------------------+-----------------------------------+
| per_lm_alllm.cov_pop_tot          | Coverage of unemployment benefits |
|                                   | and ALMP (% of population)        |
+-----------------------------------+-----------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Labor/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>Labor force participation rate for ages 15-24, female (%) (modeled ILO estimate) [SL.TLF.ACTI.1524.FE.ZS]</th>
          <th>Labor force participation rate, total (% of total population ages 15+) (modeled ILO estimate) [SL.TLF.CACT.ZS]</th>
          <th>Ratio of female to male labor force participation rate (%) (modeled ILO estimate) [SL.TLF.CACT.FM.ZS]</th>
          <th>Average working hours of children, study and work, ages 7-14 (hours per week) [SL.TLF.0714.SW.TM]</th>
          <th>Average working hours of children, working only, ages 7-14 (hours per week) [SL.TLF.0714.WK.TM]</th>
          <th>Employers, total (% of total employment) (modeled ILO estimate) [SL.EMP.MPYR.ZS]</th>
          <th>Employment in agriculture (% of total employment) (modeled ILO estimate) [SL.AGR.EMPL.ZS]</th>
          <th>Employment in industry (% of total employment) (modeled ILO estimate) [SL.IND.EMPL.ZS]</th>
          <th>Employment in services (% of total employment) (modeled ILO estimate) [SL.SRV.EMPL.ZS]</th>
          <th>Informal employment (% of total non-agricultural employment) [SL.ISV.IFRM.ZS]</th>
          <th>Unemployment, total (% of total labor force) (modeled ILO estimate) [SL.UEM.TOTL.ZS]</th>
          <th>Self-employed, total (% of total employment) (modeled ILO estimate) [SL.EMP.SELF.ZS]</th>
          <th>Coverage of unemployment benefits and ALMP (% of population) [per_lm_alllm.cov_pop_tot]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>636</th>
          <td>1996</td>
          <td>YR1996</td>
          <td>Jamaica</td>
          <td>JAM</td>
          <td>34.242</td>
          <td>68.783</td>
          <td>77.805</td>
          <td>..</td>
          <td>..</td>
          <td>2.288</td>
          <td>22.660</td>
          <td>20.318</td>
          <td>57.021</td>
          <td>..</td>
          <td>16.010</td>
          <td>40.037</td>
          <td>..</td>
        </tr>
        <tr>
          <th>2446</th>
          <td>2003</td>
          <td>YR2003</td>
          <td>Djibouti</td>
          <td>DJI</td>
          <td>51.869</td>
          <td>62.256</td>
          <td>63.212</td>
          <td>..</td>
          <td>..</td>
          <td>2.186</td>
          <td>55.706</td>
          <td>6.799</td>
          <td>37.495</td>
          <td>..</td>
          <td>13.294</td>
          <td>52.740</td>
          <td>..</td>
        </tr>
        <tr>
          <th>2687</th>
          <td>2004</td>
          <td>YR2004</td>
          <td>Burkina Faso</td>
          <td>BFA</td>
          <td>60.145</td>
          <td>74.901</td>
          <td>72.972</td>
          <td>..</td>
          <td>..</td>
          <td>0.801</td>
          <td>70.033</td>
          <td>10.806</td>
          <td>19.161</td>
          <td>..</td>
          <td>3.390</td>
          <td>93.762</td>
          <td>..</td>
        </tr>
        <tr>
          <th>3275</th>
          <td>2006</td>
          <td>YR2006</td>
          <td>Israel</td>
          <td>ISR</td>
          <td>54.282</td>
          <td>62.149</td>
          <td>80.036</td>
          <td>..</td>
          <td>..</td>
          <td>4.119</td>
          <td>1.784</td>
          <td>21.462</td>
          <td>76.755</td>
          <td>..</td>
          <td>10.707</td>
          <td>11.991</td>
          <td>..</td>
        </tr>
        <tr>
          <th>2155</th>
          <td>2002</td>
          <td>YR2002</td>
          <td>Botswana</td>
          <td>BWA</td>
          <td>36.468</td>
          <td>60.404</td>
          <td>73.575</td>
          <td>..</td>
          <td>..</td>
          <td>2.198</td>
          <td>20.817</td>
          <td>22.243</td>
          <td>56.939</td>
          <td>..</td>
          <td>21.203</td>
          <td>31.356</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SL.TLF.ACTI.1524.FE.ZS</th>
          <th>SL.TLF.CACT.ZS</th>
          <th>SL.TLF.CACT.FM.ZS</th>
          <th>SL.TLF.0714.SW.TM</th>
          <th>SL.TLF.0714.WK.TM</th>
          <th>SL.EMP.MPYR.ZS</th>
          <th>SL.AGR.EMPL.ZS</th>
          <th>SL.IND.EMPL.ZS</th>
          <th>SL.SRV.EMPL.ZS</th>
          <th>SL.ISV.IFRM.ZS</th>
          <th>SL.UEM.TOTL.ZS</th>
          <th>SL.EMP.SELF.ZS</th>
          <th>per_lm_alllm.cov_pop_tot</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>TKM</th>
          <th>1998</th>
          <td>35.039</td>
          <td>63.004</td>
          <td>68.603</td>
          <td>nan</td>
          <td>nan</td>
          <td>1.759</td>
          <td>26.156</td>
          <td>33.530</td>
          <td>40.314</td>
          <td>nan</td>
          <td>12.200</td>
          <td>29.216</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>PHL</th>
          <th>2010</th>
          <td>33.267</td>
          <td>62.213</td>
          <td>63.843</td>
          <td>nan</td>
          <td>nan</td>
          <td>3.867</td>
          <td>33.186</td>
          <td>15.440</td>
          <td>51.375</td>
          <td>nan</td>
          <td>3.605</td>
          <td>45.843</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>MUS</th>
          <th>2009</th>
          <td>32.250</td>
          <td>57.629</td>
          <td>55.998</td>
          <td>nan</td>
          <td>nan</td>
          <td>3.924</td>
          <td>9.039</td>
          <td>29.681</td>
          <td>61.281</td>
          <td>nan</td>
          <td>7.257</td>
          <td>19.842</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>GNQ</th>
          <th>2008</th>
          <td>29.953</td>
          <td>60.848</td>
          <td>79.422</td>
          <td>nan</td>
          <td>nan</td>
          <td>1.789</td>
          <td>44.410</td>
          <td>17.095</td>
          <td>38.495</td>
          <td>nan</td>
          <td>7.743</td>
          <td>56.880</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>LIE</th>
          <th>1995</th>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Labor_WDI.pickle")
