
Full Dataset Cleaning and Imputation
====================================

.. code:: ipython3

    import pandas as pd
    from fancyimpute import IterativeImputer
    import numpy as np


.. parsed-literal::

    Using TensorFlow backend.


.. code:: ipython3

    # Import the dataset
    df = pd.read_csv("../data/processed/Full.csv")
    dc = df.columns.values

Remove Unneeded Variables
-------------------------

.. code:: ipython3

    # List out the variables
    # for i in dc:
    #     print(i)

.. code:: ipython3

    # Select variables to remove
    # population: duplicate
    # quality_score: meta
    # id: meta
    rm_vars = ["quality_score","population","id"]

.. code:: ipython3

    df.drop(rm_vars, axis="columns", inplace=True)

Remove Sparse Variables
-----------------------

.. code:: ipython3

    ds = df.describe().transpose()

.. code:: ipython3

    # columns with <20% values
    sparse = ds[(ds["count"] < 800)].index.values.tolist()

.. code:: ipython3

    df.drop(sparse,axis=1,inplace=True)

Impute Remaining NaNs
---------------------

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

.. code:: ipython3

    XY_incomplete = df.values
    
    n_imputations = 5
    XY_completed = []
    for i in range(n_imputations):
        print("Imputing set {} of 5".format(i+1))
        imputer = IterativeImputer(n_iter=10, sample_posterior=True, random_state=i, initial_strategy="median")
        XY_completed.append(imputer.fit_transform(XY_incomplete))
    
    XY_completed_mean = np.mean(XY_completed, 0)
    XY_completed_std = np.std(XY_completed, 0)


.. parsed-literal::

    Imputing set 1 of 5
    Imputing set 2 of 5
    Imputing set 3 of 5
    Imputing set 4 of 5
    Imputing set 5 of 5


.. code:: ipython3

    df1 = df.copy()
    df2 = df.copy()
    df3 = df.copy()
    df4 = df.copy()
    df5 = df.copy()
    df1[:] = XY_completed[0]
    df2[:] = XY_completed[1]
    df3[:] = XY_completed[2]
    df4[:] = XY_completed[3]
    df5[:] = XY_completed[4]

Check The Integrity of Imputed Dataframes
-----------------------------------------

.. code:: ipython3

    def dfDiff(pair: tuple):
        """
        Takes a tuple of two pandas.DataFrames and returns a dataframe with changed values 
        
        Source: https://wellsr.com/python/pandas-compare-two-data-frames/
        
        IN:
        (
        Index | Col 
        ------|-----
        0     |0  
        1     |1  
        2     |0  
        3     |1  
        4     |1  
        ,
        Index | Col 
        ------|-----
        0     |1  
        1     |1  
        2     |1  
        3     |1  
        4     |0  
        )
        
        OUT:
        Index | Col | Old | New
        ------|-----|-----|-----
        0     |num  |0    |1
        2     |num  |0    |1
        4     |num  |1    |0
        """
        oldFrame, newFrame = pair
        dfBool = (oldFrame != newFrame).stack()
        diff = pd.concat([oldFrame.stack()[dfBool], newFrame.stack()[dfBool]], axis=1)
        diff.columns=["Old", "New"]
        return diff
    
    def pairCombinations(l):
        """
        Takes a list (l) and returns a list of sets containing every possible pair
        Does not return any sets of two idential objects
        """
        l2 = l[1:]
        pairs = []
        for one in l:
            for two in l2:
                pairs.append((one,two))
            l2 = l2[1:]
        return pairs

.. code:: ipython3

    diffs = [] # This will hold the computed difference dataframes
    combinations = pairCombinations([df, df1, df2, df3, df4, df5]) # All possible combinations of two dataframes
    combination_labels = pairCombinations(['df', 'df1', 'df2', 'df3', 'df4', 'df5'])

.. code:: ipython3

    for pair in combinations:
        diffs.append(dfDiff(pair))

.. code:: ipython3

    df_one = []
    df_two = []
    
    for pair in combination_labels:
        one, two = pair
        df_one.append(one)
        df_two.append(two)
    
    changed = [len(diff) for diff in diffs]
    
    cols = {
        "DF ONE": df_one,
        "DF TWO": df_two,
        "Changed Values": changed
    }

.. code:: ipython3

    pd.DataFrame(cols).head(20)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>DF ONE</th>
          <th>DF TWO</th>
          <th>Changed Values</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>df</td>
          <td>df1</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>1</th>
          <td>df</td>
          <td>df2</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>2</th>
          <td>df</td>
          <td>df3</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>3</th>
          <td>df</td>
          <td>df4</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>4</th>
          <td>df</td>
          <td>df5</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>5</th>
          <td>df1</td>
          <td>df2</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>6</th>
          <td>df1</td>
          <td>df3</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>7</th>
          <td>df1</td>
          <td>df4</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>8</th>
          <td>df1</td>
          <td>df5</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>9</th>
          <td>df2</td>
          <td>df3</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>10</th>
          <td>df2</td>
          <td>df4</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>11</th>
          <td>df2</td>
          <td>df5</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>12</th>
          <td>df3</td>
          <td>df4</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>13</th>
          <td>df3</td>
          <td>df5</td>
          <td>149842</td>
        </tr>
        <tr>
          <th>14</th>
          <td>df4</td>
          <td>df5</td>
          <td>149842</td>
        </tr>
      </tbody>
    </table>
    </div>



Save the Data Frames
--------------------

.. code:: ipython3

    df.to_csv("../data/production/Full_clean.csv")
    df1.to_csv("../data/production/Full_clean_imputed_1.csv")
    df2.to_csv("../data/production/Full_clean_imputed_2.csv")
    df3.to_csv("../data/production/Full_clean_imputed_3.csv")
    df4.to_csv("../data/production/Full_clean_imputed_4.csv")
    df5.to_csv("../data/production/Full_clean_imputed_5.csv")
