
Urbanization Data Processing (UNPD)
===================================

Data Dictionary
---------------

+---------------------+-------------------------------------------------------------------------------------+
| Code                | Indicator Name                                                                      |
+=====================+=====================================================================================+
| SP.URB.TOTL.IN.ZS   | Urban population (% of total)                                                       |
+---------------------+-------------------------------------------------------------------------------------+
| SP.URB.GROW         | Urban population growth (annual %)                                                  |
+---------------------+-------------------------------------------------------------------------------------+
| EN.POP.SLUM.UR.ZS   | Population living in slums (% of urban population)                                  |
+---------------------+-------------------------------------------------------------------------------------+
| EN.URB.MCTY.TL.ZS   | Population in urban agglomerations of more than 1 million (% of total population)   |
+---------------------+-------------------------------------------------------------------------------------+
| EN.URB.LCTY.UR.ZS   | Population in the largest city (% of urban population)                              |
+---------------------+-------------------------------------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Urbanization/UNPD/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>Urban population (% of total) [SP.URB.TOTL.IN.ZS]</th>
          <th>Urban population growth (annual %) [SP.URB.GROW]</th>
          <th>Population living in slums (% of urban population) [EN.POP.SLUM.UR.ZS]</th>
          <th>Population in urban agglomerations of more than 1 million (% of total population) [EN.URB.MCTY.TL.ZS]</th>
          <th>Population in the largest city (% of urban population) [EN.URB.LCTY.UR.ZS]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1397</th>
          <td>1999</td>
          <td>YR1999</td>
          <td>Eritrea</td>
          <td>ERI</td>
          <td>25.735</td>
          <td>5.678</td>
          <td>..</td>
          <td>..</td>
          <td>49.971</td>
        </tr>
        <tr>
          <th>4430</th>
          <td>2010</td>
          <td>YR2010</td>
          <td>United Arab Emirates</td>
          <td>ARE</td>
          <td>84.087</td>
          <td>7.998</td>
          <td>..</td>
          <td>44.580</td>
          <td>26.957</td>
        </tr>
        <tr>
          <th>6150</th>
          <td>2017</td>
          <td>YR2017</td>
          <td>Estonia</td>
          <td>EST</td>
          <td>68.717</td>
          <td>0.345</td>
          <td>..</td>
          <td>..</td>
          <td>47.499</td>
        </tr>
        <tr>
          <th>1977</th>
          <td>2001</td>
          <td>YR2001</td>
          <td>Malaysia</td>
          <td>MYS</td>
          <td>62.922</td>
          <td>3.703</td>
          <td>..</td>
          <td>18.220</td>
          <td>28.956</td>
        </tr>
        <tr>
          <th>4674</th>
          <td>2011</td>
          <td>YR2011</td>
          <td>St. Lucia</td>
          <td>LCA</td>
          <td>18.450</td>
          <td>0.723</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SP.URB.TOTL.IN.ZS</th>
          <th>SP.URB.GROW</th>
          <th>EN.POP.SLUM.UR.ZS</th>
          <th>EN.URB.MCTY.TL.ZS</th>
          <th>EN.URB.LCTY.UR.ZS</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>MKD</th>
          <th>2010</th>
          <td>57.089</td>
          <td>0.030</td>
          <td>nan</td>
          <td>nan</td>
          <td>44.088</td>
        </tr>
        <tr>
          <th rowspan="2" valign="top">MNE</th>
          <th>2016</th>
          <td>66.141</td>
          <td>0.531</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>2017</th>
          <td>66.477</td>
          <td>0.518</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>THA</th>
          <th>1998</th>
          <td>30.795</td>
          <td>1.762</td>
          <td>nan</td>
          <td>12.326</td>
          <td>33.047</td>
        </tr>
        <tr>
          <th>SAU</th>
          <th>1996</th>
          <td>78.910</td>
          <td>2.395</td>
          <td>nan</td>
          <td>40.233</td>
          <td>20.765</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Urbanization_UNPD.pickle")
