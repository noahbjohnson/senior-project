
Labor Data Processing (WDI/ILO)
===============================

Data Dictionary
---------------

+--------------------------------+-------------------------------------------------------------------------------------------------+
| **Code**                       | **Indicator Name**                                                                              |
+================================+=================================================================================================+
| SL.TLF.ACTI.1524.FE.ZS         | Labor force participation rate for ages 15-24, female (%) (modeled ILO estimate)                |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.CACT.ZS                 | Labor force participation rate, total (% of total population ages 15+) (modeled ILO estimate)   |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.CACT.FM.ZS              | Ratio of female to male labor force participation rate (%) (modeled ILO estimate)               |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.0714.SW.TM              | Average working hours of children, study and work, ages 7-14 (hours per week)                   |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.0714.WK.TM              | Average working hours of children, working only, ages 7-14 (hours per week)                     |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.EMP.MPYR.ZS                 | Employers, total (% of total employment) (modeled ILO estimate)                                 |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.AGR.EMPL.ZS                 | Employment in agriculture (% of total employment) (modeled ILO estimate)                        |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.IND.EMPL.ZS                 | Employment in industry (% of total employment) (modeled ILO estimate)                           |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.SRV.EMPL.ZS                 | Employment in services (% of total employment) (modeled ILO estimate)                           |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.ISV.IFRM.ZS                 | Informal employment (% of total non-agricultural employment)                                    |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.UEM.TOTL.ZS                 | Unemployment, total (% of total labor force) (modeled ILO estimate)                             |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.EMP.SELF.ZS                 | Self-employed, total (% of total employment) (modeled ILO estimate)                             |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| per\_lm\_alllm.cov\_pop\_tot   | Coverage of unemployment benefits and ALMP (% of population)                                    |
+--------------------------------+-------------------------------------------------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Labor/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>Labor force participation rate for ages 15-24, female (%) (modeled ILO estimate) [SL.TLF.ACTI.1524.FE.ZS]</th>
          <th>Labor force participation rate, total (% of total population ages 15+) (modeled ILO estimate) [SL.TLF.CACT.ZS]</th>
          <th>Ratio of female to male labor force participation rate (%) (modeled ILO estimate) [SL.TLF.CACT.FM.ZS]</th>
          <th>Average working hours of children, study and work, ages 7-14 (hours per week) [SL.TLF.0714.SW.TM]</th>
          <th>Average working hours of children, working only, ages 7-14 (hours per week) [SL.TLF.0714.WK.TM]</th>
          <th>Employers, total (% of total employment) (modeled ILO estimate) [SL.EMP.MPYR.ZS]</th>
          <th>Employment in agriculture (% of total employment) (modeled ILO estimate) [SL.AGR.EMPL.ZS]</th>
          <th>Employment in industry (% of total employment) (modeled ILO estimate) [SL.IND.EMPL.ZS]</th>
          <th>Employment in services (% of total employment) (modeled ILO estimate) [SL.SRV.EMPL.ZS]</th>
          <th>Informal employment (% of total non-agricultural employment) [SL.ISV.IFRM.ZS]</th>
          <th>Unemployment, total (% of total labor force) (modeled ILO estimate) [SL.UEM.TOTL.ZS]</th>
          <th>Self-employed, total (% of total employment) (modeled ILO estimate) [SL.EMP.SELF.ZS]</th>
          <th>Coverage of unemployment benefits and ALMP (% of population) [per_lm_alllm.cov_pop_tot]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>3783</th>
          <td>2008</td>
          <td>YR2008</td>
          <td>Georgia</td>
          <td>GEO</td>
          <td>24.942</td>
          <td>63.550</td>
          <td>73.266</td>
          <td>..</td>
          <td>..</td>
          <td>1.148</td>
          <td>52.920</td>
          <td>10.461</td>
          <td>36.620</td>
          <td>..</td>
          <td>17.870</td>
          <td>61.026</td>
          <td>..</td>
        </tr>
        <tr>
          <th>5839</th>
          <td>2016</td>
          <td>YR2016</td>
          <td>Bahamas, The</td>
          <td>BHS</td>
          <td>42.352</td>
          <td>74.585</td>
          <td>82.241</td>
          <td>..</td>
          <td>..</td>
          <td>4.489</td>
          <td>2.674</td>
          <td>16.056</td>
          <td>81.270</td>
          <td>..</td>
          <td>12.700</td>
          <td>14.468</td>
          <td>..</td>
        </tr>
        <tr>
          <th>1585</th>
          <td>2000</td>
          <td>YR2000</td>
          <td>Australia</td>
          <td>AUS</td>
          <td>68.451</td>
          <td>63.360</td>
          <td>75.538</td>
          <td>..</td>
          <td>..</td>
          <td>7.546</td>
          <td>4.857</td>
          <td>21.615</td>
          <td>73.527</td>
          <td>..</td>
          <td>6.283</td>
          <td>19.981</td>
          <td>..</td>
        </tr>
        <tr>
          <th>6082</th>
          <td>2017</td>
          <td>YR2017</td>
          <td>Korea, Rep.</td>
          <td>KOR</td>
          <td>34.766</td>
          <td>62.938</td>
          <td>72.011</td>
          <td>..</td>
          <td>..</td>
          <td>1.755</td>
          <td>4.784</td>
          <td>25.072</td>
          <td>70.143</td>
          <td>..</td>
          <td>3.700</td>
          <td>25.411</td>
          <td>..</td>
        </tr>
        <tr>
          <th>3892</th>
          <td>2008</td>
          <td>YR2008</td>
          <td>Timor-Leste</td>
          <td>TLS</td>
          <td>14.014</td>
          <td>44.186</td>
          <td>46.790</td>
          <td>..</td>
          <td>..</td>
          <td>1.721</td>
          <td>51.167</td>
          <td>9.693</td>
          <td>39.140</td>
          <td>..</td>
          <td>2.964</td>
          <td>70.846</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SL.TLF.ACTI.1524.FE.ZS</th>
          <th>SL.TLF.CACT.ZS</th>
          <th>SL.TLF.CACT.FM.ZS</th>
          <th>SL.TLF.0714.SW.TM</th>
          <th>SL.TLF.0714.WK.TM</th>
          <th>SL.EMP.MPYR.ZS</th>
          <th>SL.AGR.EMPL.ZS</th>
          <th>SL.IND.EMPL.ZS</th>
          <th>SL.SRV.EMPL.ZS</th>
          <th>SL.ISV.IFRM.ZS</th>
          <th>SL.UEM.TOTL.ZS</th>
          <th>SL.EMP.SELF.ZS</th>
          <th>per_lm_alllm.cov_pop_tot</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>LBN</th>
          <th>2013</th>
          <td>17.597</td>
          <td>46.359</td>
          <td>32.684</td>
          <td>nan</td>
          <td>nan</td>
          <td>9.428</td>
          <td>12.815</td>
          <td>23.199</td>
          <td>63.986</td>
          <td>nan</td>
          <td>6.382</td>
          <td>36.773</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>BRN</th>
          <th>2012</th>
          <td>38.830</td>
          <td>66.293</td>
          <td>76.967</td>
          <td>nan</td>
          <td>nan</td>
          <td>3.226</td>
          <td>0.620</td>
          <td>19.147</td>
          <td>80.232</td>
          <td>nan</td>
          <td>6.897</td>
          <td>7.760</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>MDG</th>
          <th>2006</th>
          <td>74.804</td>
          <td>87.235</td>
          <td>94.782</td>
          <td>nan</td>
          <td>nan</td>
          <td>2.136</td>
          <td>80.369</td>
          <td>3.846</td>
          <td>15.785</td>
          <td>nan</td>
          <td>2.520</td>
          <td>87.564</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>ETH</th>
          <th>2009</th>
          <td>70.890</td>
          <td>81.461</td>
          <td>82.926</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.590</td>
          <td>75.274</td>
          <td>7.808</td>
          <td>16.918</td>
          <td>nan</td>
          <td>2.354</td>
          <td>89.908</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>NLD</th>
          <th>2010</th>
          <td>69.423</td>
          <td>64.692</td>
          <td>81.671</td>
          <td>nan</td>
          <td>nan</td>
          <td>3.878</td>
          <td>3.073</td>
          <td>17.632</td>
          <td>79.295</td>
          <td>nan</td>
          <td>4.450</td>
          <td>15.014</td>
          <td>nan</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Labor_WDI.pickle")
