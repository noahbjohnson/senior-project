
Labor Data Processing (WDI/ILO)
===============================

Data Dictionary
---------------

+--------------------------------+-------------------------------------------------------------------------------------------------+
| **Code**                       | **Indicator Name**                                                                              |
+================================+=================================================================================================+
| SL.TLF.ACTI.1524.FE.ZS         | Labor force participation rate for ages 15-24, female (%) (modeled ILO estimate)                |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.CACT.ZS                 | Labor force participation rate, total (% of total population ages 15+) (modeled ILO estimate)   |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.CACT.FM.ZS              | Ratio of female to male labor force participation rate (%) (modeled ILO estimate)               |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.0714.SW.TM              | Average working hours of children, study and work, ages 7-14 (hours per week)                   |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.TLF.0714.WK.TM              | Average working hours of children, working only, ages 7-14 (hours per week)                     |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.EMP.MPYR.ZS                 | Employers, total (% of total employment) (modeled ILO estimate)                                 |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.AGR.EMPL.ZS                 | Employment in agriculture (% of total employment) (modeled ILO estimate)                        |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.IND.EMPL.ZS                 | Employment in industry (% of total employment) (modeled ILO estimate)                           |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.SRV.EMPL.ZS                 | Employment in services (% of total employment) (modeled ILO estimate)                           |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.ISV.IFRM.ZS                 | Informal employment (% of total non-agricultural employment)                                    |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.UEM.TOTL.ZS                 | Unemployment, total (% of total labor force) (modeled ILO estimate)                             |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| SL.EMP.SELF.ZS                 | Self-employed, total (% of total employment) (modeled ILO estimate)                             |
+--------------------------------+-------------------------------------------------------------------------------------------------+
| per\_lm\_alllm.cov\_pop\_tot   | Coverage of unemployment benefits and ALMP (% of population)                                    |
+--------------------------------+-------------------------------------------------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Labor/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>Labor force participation rate for ages 15-24, female (%) (modeled ILO estimate) [SL.TLF.ACTI.1524.FE.ZS]</th>
          <th>Labor force participation rate, total (% of total population ages 15+) (modeled ILO estimate) [SL.TLF.CACT.ZS]</th>
          <th>Ratio of female to male labor force participation rate (%) (modeled ILO estimate) [SL.TLF.CACT.FM.ZS]</th>
          <th>Average working hours of children, study and work, ages 7-14 (hours per week) [SL.TLF.0714.SW.TM]</th>
          <th>Average working hours of children, working only, ages 7-14 (hours per week) [SL.TLF.0714.WK.TM]</th>
          <th>Employers, total (% of total employment) (modeled ILO estimate) [SL.EMP.MPYR.ZS]</th>
          <th>Employment in agriculture (% of total employment) (modeled ILO estimate) [SL.AGR.EMPL.ZS]</th>
          <th>Employment in industry (% of total employment) (modeled ILO estimate) [SL.IND.EMPL.ZS]</th>
          <th>Employment in services (% of total employment) (modeled ILO estimate) [SL.SRV.EMPL.ZS]</th>
          <th>Informal employment (% of total non-agricultural employment) [SL.ISV.IFRM.ZS]</th>
          <th>Unemployment, total (% of total labor force) (modeled ILO estimate) [SL.UEM.TOTL.ZS]</th>
          <th>Self-employed, total (% of total employment) (modeled ILO estimate) [SL.EMP.SELF.ZS]</th>
          <th>Coverage of unemployment benefits and ALMP (% of population) [per_lm_alllm.cov_pop_tot]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>5978</th>
          <td>2016</td>
          <td>YR2016</td>
          <td>San Marino</td>
          <td>SMR</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>3376</th>
          <td>2006</td>
          <td>YR2006</td>
          <td>Uzbekistan</td>
          <td>UZB</td>
          <td>35.151</td>
          <td>63.297</td>
          <td>70.054</td>
          <td>..</td>
          <td>..</td>
          <td>1.551</td>
          <td>35.946</td>
          <td>29.444</td>
          <td>34.610</td>
          <td>..</td>
          <td>5.850</td>
          <td>46.338</td>
          <td>..</td>
        </tr>
        <tr>
          <th>3165</th>
          <td>2005</td>
          <td>YR2005</td>
          <td>Sub-Saharan Africa (IDA &amp; IBRD countries)</td>
          <td>TSS</td>
          <td>49.328</td>
          <td>68.413</td>
          <td>83.413</td>
          <td>..</td>
          <td>..</td>
          <td>2.392</td>
          <td>61.269</td>
          <td>9.910</td>
          <td>28.822</td>
          <td>..</td>
          <td>7.102</td>
          <td>79.452</td>
          <td>..</td>
        </tr>
        <tr>
          <th>611</th>
          <td>1996</td>
          <td>YR1996</td>
          <td>Finland</td>
          <td>FIN</td>
          <td>45.817</td>
          <td>59.173</td>
          <td>85.325</td>
          <td>..</td>
          <td>..</td>
          <td>3.865</td>
          <td>7.893</td>
          <td>27.086</td>
          <td>65.020</td>
          <td>..</td>
          <td>15.572</td>
          <td>16.604</td>
          <td>..</td>
        </tr>
        <tr>
          <th>6500</th>
          <td>2018</td>
          <td>YR2018</td>
          <td>Portugal</td>
          <td>PRT</td>
          <td>32.796</td>
          <td>58.706</td>
          <td>83.889</td>
          <td>..</td>
          <td>..</td>
          <td>4.755</td>
          <td>6.339</td>
          <td>24.571</td>
          <td>69.090</td>
          <td>..</td>
          <td>6.860</td>
          <td>16.980</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SL.TLF.ACTI.1524.FE.ZS</th>
          <th>SL.TLF.CACT.ZS</th>
          <th>SL.TLF.CACT.FM.ZS</th>
          <th>SL.TLF.0714.SW.TM</th>
          <th>SL.TLF.0714.WK.TM</th>
          <th>SL.EMP.MPYR.ZS</th>
          <th>SL.AGR.EMPL.ZS</th>
          <th>SL.IND.EMPL.ZS</th>
          <th>SL.SRV.EMPL.ZS</th>
          <th>SL.ISV.IFRM.ZS</th>
          <th>SL.UEM.TOTL.ZS</th>
          <th>SL.EMP.SELF.ZS</th>
          <th>per_lm_alllm.cov_pop_tot</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>CIV</th>
          <th>2009</th>
          <td>34.424</td>
          <td>61.154</td>
          <td>65.799</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.925</td>
          <td>46.283</td>
          <td>11.608</td>
          <td>42.109</td>
          <td>nan</td>
          <td>6.493</td>
          <td>78.171</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>BHR</th>
          <th>1994</th>
          <td>24.320</td>
          <td>65.185</td>
          <td>35.349</td>
          <td>nan</td>
          <td>nan</td>
          <td>2.114</td>
          <td>2.112</td>
          <td>28.393</td>
          <td>69.495</td>
          <td>nan</td>
          <td>1.135</td>
          <td>4.810</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>MDG</th>
          <th>2015</th>
          <td>73.597</td>
          <td>86.537</td>
          <td>93.190</td>
          <td>nan</td>
          <td>nan</td>
          <td>3.846</td>
          <td>68.789</td>
          <td>7.388</td>
          <td>23.823</td>
          <td>83.860</td>
          <td>1.800</td>
          <td>89.415</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>JAM</th>
          <th>2003</th>
          <td>34.564</td>
          <td>65.727</td>
          <td>74.501</td>
          <td>nan</td>
          <td>nan</td>
          <td>2.760</td>
          <td>20.387</td>
          <td>17.451</td>
          <td>62.162</td>
          <td>nan</td>
          <td>11.740</td>
          <td>38.634</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>IRQ</th>
          <th>2011</th>
          <td>6.023</td>
          <td>42.280</td>
          <td>16.497</td>
          <td>10.300</td>
          <td>22.200</td>
          <td>3.301</td>
          <td>21.127</td>
          <td>24.267</td>
          <td>54.607</td>
          <td>nan</td>
          <td>8.194</td>
          <td>29.406</td>
          <td>nan</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Labor_WDI.pickle")
