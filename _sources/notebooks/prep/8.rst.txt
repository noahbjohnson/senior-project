
Education Data Processing (WDI)
===============================

Data Dictionary
---------------

+---------------------+-------------------------------------------------------------------------------+
| Code                | Indicator Name                                                                |
+=====================+===============================================================================+
| SE.ENR.PRSC.FM.ZS   | School enrollment, primary and secondary (gross), gender parity index (GPI)   |
+---------------------+-------------------------------------------------------------------------------+
| SE.ADT.LITR.ZS      | Literacy rate, adult total (% of people ages 15 and above)                    |
+---------------------+-------------------------------------------------------------------------------+
| SE.COM.DURS         | Compulsory education, duration (years)                                        |
+---------------------+-------------------------------------------------------------------------------+
| SE.PRM.UNER.ZS      | Children out of school (% of primary school age)                              |
+---------------------+-------------------------------------------------------------------------------+
| SE.PRM.ENRL.TC.ZS   | Pupil-teacher ratio, primary                                                  |
+---------------------+-------------------------------------------------------------------------------+
| SE.SEC.ENRL.TC.ZS   | Pupil-teacher ratio, secondary                                                |
+---------------------+-------------------------------------------------------------------------------+
| SE.SEC.NENR         | School enrollment, secondary (% net)                                          |
+---------------------+-------------------------------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Education/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>School enrollment, primary and secondary (gross), gender parity index (GPI) [SE.ENR.PRSC.FM.ZS]</th>
          <th>Literacy rate, adult total (% of people ages 15 and above) [SE.ADT.LITR.ZS]</th>
          <th>Compulsory education, duration (years) [SE.COM.DURS]</th>
          <th>Children out of school (% of primary school age) [SE.PRM.UNER.ZS]</th>
          <th>Pupil-teacher ratio, primary [SE.PRM.ENRL.TC.ZS]</th>
          <th>Pupil-teacher ratio, secondary [SE.SEC.ENRL.TC.ZS]</th>
          <th>School enrollment, secondary (% net) [SE.SEC.NENR]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>4380</th>
          <td>2011</td>
          <td>YR2011</td>
          <td>Pakistan</td>
          <td>PAK</td>
          <td>0.816</td>
          <td>54.738</td>
          <td>12</td>
          <td>28.505</td>
          <td>39.833</td>
          <td>..</td>
          <td>36.187</td>
        </tr>
        <tr>
          <th>1206</th>
          <td>1999</td>
          <td>YR1999</td>
          <td>Niger</td>
          <td>NER</td>
          <td>0.633</td>
          <td>..</td>
          <td>..</td>
          <td>73.876</td>
          <td>41.067</td>
          <td>24.386</td>
          <td>5.445</td>
        </tr>
        <tr>
          <th>1319</th>
          <td>1999</td>
          <td>YR1999</td>
          <td>World</td>
          <td>WLD</td>
          <td>0.916</td>
          <td>81.314</td>
          <td>9</td>
          <td>15.967</td>
          <td>26.553</td>
          <td>17.538</td>
          <td>54.394</td>
        </tr>
        <tr>
          <th>3710</th>
          <td>2009</td>
          <td>YR2009</td>
          <td>Saudi Arabia</td>
          <td>SAU</td>
          <td>0.931</td>
          <td>..</td>
          <td>9</td>
          <td>9.003</td>
          <td>11.432</td>
          <td>11.347</td>
          <td>73.257</td>
        </tr>
        <tr>
          <th>3762</th>
          <td>2009</td>
          <td>YR2009</td>
          <td>Curacao</td>
          <td>CUW</td>
          <td>..</td>
          <td>..</td>
          <td>14</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SE.ENR.PRSC.FM.ZS</th>
          <th>SE.ADT.LITR.ZS</th>
          <th>SE.COM.DURS</th>
          <th>SE.PRM.UNER.ZS</th>
          <th>SE.PRM.ENRL.TC.ZS</th>
          <th>SE.SEC.ENRL.TC.ZS</th>
          <th>SE.SEC.NENR</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>HTI</th>
          <th>2001</th>
          <td>nan</td>
          <td>nan</td>
          <td>6.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>MLI</th>
          <th>2015</th>
          <td>0.864</td>
          <td>33.069</td>
          <td>9.000</td>
          <td>39.432</td>
          <td>42.707</td>
          <td>19.193</td>
          <td>31.319</td>
        </tr>
        <tr>
          <th>PHL</th>
          <th>2002</th>
          <td>1.026</td>
          <td>nan</td>
          <td>11.000</td>
          <td>9.936</td>
          <td>35.389</td>
          <td>38.331</td>
          <td>54.592</td>
        </tr>
        <tr>
          <th>VNM</th>
          <th>2016</th>
          <td>nan</td>
          <td>nan</td>
          <td>10.000</td>
          <td>nan</td>
          <td>19.630</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>CAF</th>
          <th>2012</th>
          <td>0.701</td>
          <td>nan</td>
          <td>10.000</td>
          <td>31.648</td>
          <td>80.116</td>
          <td>68.131</td>
          <td>13.704</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Education_WDI.pickle")
