
Education Data Processing (WDI)
===============================

Data Dictionary
---------------

+---------------------+-------------------------------------------------------------------------------+
| Code                | Indicator Name                                                                |
+=====================+===============================================================================+
| SE.ENR.PRSC.FM.ZS   | School enrollment, primary and secondary (gross), gender parity index (GPI)   |
+---------------------+-------------------------------------------------------------------------------+
| SE.ADT.LITR.ZS      | Literacy rate, adult total (% of people ages 15 and above)                    |
+---------------------+-------------------------------------------------------------------------------+
| SE.COM.DURS         | Compulsory education, duration (years)                                        |
+---------------------+-------------------------------------------------------------------------------+
| SE.PRM.UNER.ZS      | Children out of school (% of primary school age)                              |
+---------------------+-------------------------------------------------------------------------------+
| SE.PRM.ENRL.TC.ZS   | Pupil-teacher ratio, primary                                                  |
+---------------------+-------------------------------------------------------------------------------+
| SE.SEC.ENRL.TC.ZS   | Pupil-teacher ratio, secondary                                                |
+---------------------+-------------------------------------------------------------------------------+
| SE.SEC.NENR         | School enrollment, secondary (% net)                                          |
+---------------------+-------------------------------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Education/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>School enrollment, primary and secondary (gross), gender parity index (GPI) [SE.ENR.PRSC.FM.ZS]</th>
          <th>Literacy rate, adult total (% of people ages 15 and above) [SE.ADT.LITR.ZS]</th>
          <th>Compulsory education, duration (years) [SE.COM.DURS]</th>
          <th>Children out of school (% of primary school age) [SE.PRM.UNER.ZS]</th>
          <th>Pupil-teacher ratio, primary [SE.PRM.ENRL.TC.ZS]</th>
          <th>Pupil-teacher ratio, secondary [SE.SEC.ENRL.TC.ZS]</th>
          <th>School enrollment, secondary (% net) [SE.SEC.NENR]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1047</th>
          <td>1998</td>
          <td>YR1998</td>
          <td>Pre-demographic dividend</td>
          <td>PRE</td>
          <td>0.792</td>
          <td>55.880</td>
          <td>6.500</td>
          <td>44.071</td>
          <td>39.932</td>
          <td>24.117</td>
          <td>17.207</td>
        </tr>
        <tr>
          <th>1611</th>
          <td>2001</td>
          <td>YR2001</td>
          <td>Armenia</td>
          <td>ARM</td>
          <td>..</td>
          <td>99.400</td>
          <td>11</td>
          <td>..</td>
          <td>20.344</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>425</th>
          <td>1996</td>
          <td>YR1996</td>
          <td>Peru</td>
          <td>PER</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>11.958</td>
          <td>27.429</td>
          <td>18.756</td>
          <td>54.788</td>
        </tr>
        <tr>
          <th>2944</th>
          <td>2006</td>
          <td>YR2006</td>
          <td>Bhutan</td>
          <td>BTN</td>
          <td>0.964</td>
          <td>..</td>
          <td>..</td>
          <td>25.891</td>
          <td>29.182</td>
          <td>21.876</td>
          <td>36.422</td>
        </tr>
        <tr>
          <th>5803</th>
          <td>2016</td>
          <td>YR2016</td>
          <td>Sub-Saharan Africa</td>
          <td>SSF</td>
          <td>0.932</td>
          <td>64.350</td>
          <td>8</td>
          <td>21.239</td>
          <td>37.629</td>
          <td>21.570</td>
          <td>34.545</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SE.ENR.PRSC.FM.ZS</th>
          <th>SE.ADT.LITR.ZS</th>
          <th>SE.COM.DURS</th>
          <th>SE.PRM.UNER.ZS</th>
          <th>SE.PRM.ENRL.TC.ZS</th>
          <th>SE.SEC.ENRL.TC.ZS</th>
          <th>SE.SEC.NENR</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>MCO</th>
          <th>2010</th>
          <td>nan</td>
          <td>nan</td>
          <td>11.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>WSM</th>
          <th>2001</th>
          <td>1.066</td>
          <td>nan</td>
          <td>8.000</td>
          <td>5.253</td>
          <td>25.045</td>
          <td>20.851</td>
          <td>65.816</td>
        </tr>
        <tr>
          <th>ARM</th>
          <th>2010</th>
          <td>0.995</td>
          <td>nan</td>
          <td>11.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>92.511</td>
        </tr>
        <tr>
          <th>SYR</th>
          <th>1997</th>
          <td>0.910</td>
          <td>nan</td>
          <td>nan</td>
          <td>4.421</td>
          <td>23.457</td>
          <td>14.811</td>
          <td>37.478</td>
        </tr>
        <tr>
          <th>GIN</th>
          <th>2005</th>
          <td>0.712</td>
          <td>nan</td>
          <td>6.000</td>
          <td>35.710</td>
          <td>44.865</td>
          <td>34.425</td>
          <td>23.275</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Education_WDI.pickle")
