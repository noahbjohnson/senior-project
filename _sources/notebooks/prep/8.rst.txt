
Education Data Processing (WDI)
===============================

Data Dictionary
---------------

+---------------------+-------------------------------------------------------------------------------+
| Code                | Indicator Name                                                                |
+=====================+===============================================================================+
| SE.ENR.PRSC.FM.ZS   | School enrollment, primary and secondary (gross), gender parity index (GPI)   |
+---------------------+-------------------------------------------------------------------------------+
| SE.ADT.LITR.ZS      | Literacy rate, adult total (% of people ages 15 and above)                    |
+---------------------+-------------------------------------------------------------------------------+
| SE.COM.DURS         | Compulsory education, duration (years)                                        |
+---------------------+-------------------------------------------------------------------------------+
| SE.PRM.UNER.ZS      | Children out of school (% of primary school age)                              |
+---------------------+-------------------------------------------------------------------------------+
| SE.PRM.ENRL.TC.ZS   | Pupil-teacher ratio, primary                                                  |
+---------------------+-------------------------------------------------------------------------------+
| SE.SEC.ENRL.TC.ZS   | Pupil-teacher ratio, secondary                                                |
+---------------------+-------------------------------------------------------------------------------+
| SE.SEC.NENR         | School enrollment, secondary (% net)                                          |
+---------------------+-------------------------------------------------------------------------------+

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Education/WDI/Data_Extract_From_World_Development_Indicators.xlsx")

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Time</th>
          <th>Time Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>School enrollment, primary and secondary (gross), gender parity index (GPI) [SE.ENR.PRSC.FM.ZS]</th>
          <th>Literacy rate, adult total (% of people ages 15 and above) [SE.ADT.LITR.ZS]</th>
          <th>Compulsory education, duration (years) [SE.COM.DURS]</th>
          <th>Children out of school (% of primary school age) [SE.PRM.UNER.ZS]</th>
          <th>Pupil-teacher ratio, primary [SE.PRM.ENRL.TC.ZS]</th>
          <th>Pupil-teacher ratio, secondary [SE.SEC.ENRL.TC.ZS]</th>
          <th>School enrollment, secondary (% net) [SE.SEC.NENR]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1095</th>
          <td>1999</td>
          <td>YR1999</td>
          <td>Bermuda</td>
          <td>BMU</td>
          <td>..</td>
          <td>..</td>
          <td>13</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>3482</th>
          <td>2008</td>
          <td>YR2008</td>
          <td>Cambodia</td>
          <td>KHM</td>
          <td>0.915</td>
          <td>77.587</td>
          <td>..</td>
          <td>5.399</td>
          <td>48.537</td>
          <td>..</td>
          <td>38.341</td>
        </tr>
        <tr>
          <th>5175</th>
          <td>2014</td>
          <td>YR2014</td>
          <td>Papua New Guinea</td>
          <td>PNG</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>2254</th>
          <td>2003</td>
          <td>YR2003</td>
          <td>Mozambique</td>
          <td>MOZ</td>
          <td>..</td>
          <td>48.159</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>80</th>
          <td>1995</td>
          <td>YR1995</td>
          <td>Ethiopia</td>
          <td>ETH</td>
          <td>0.636</td>
          <td>..</td>
          <td>..</td>
          <td>78.155</td>
          <td>32.753</td>
          <td>32.038</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['Country Code']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

.. code:: ipython3

    df.rename(
        {
            "Time": "Year"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Header
~~~~~~

.. code:: ipython3

    df.drop(["Time Code", "Country Name"],
            axis='columns',
            inplace=True)

.. code:: ipython3

    c = [ re.search(r"\[(\w+\.)+\w+\]",d)[0].replace("[","").replace("]","") for d in df.columns ]

.. code:: ipython3

    c_names = {}
    for x in range(len(c)):
        c_names[df.columns[x]] = c[x]

.. code:: ipython3

    df.rename(c_names,axis='columns',inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    df = df.replace('..', np.NaN)

.. code:: ipython3

    df = df.astype(float)

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>SE.ENR.PRSC.FM.ZS</th>
          <th>SE.ADT.LITR.ZS</th>
          <th>SE.COM.DURS</th>
          <th>SE.PRM.UNER.ZS</th>
          <th>SE.PRM.ENRL.TC.ZS</th>
          <th>SE.SEC.ENRL.TC.ZS</th>
          <th>SE.SEC.NENR</th>
        </tr>
        <tr>
          <th>Country Code</th>
          <th>Year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>CHN</th>
          <th>2008</th>
          <td>0.998</td>
          <td>nan</td>
          <td>9.000</td>
          <td>nan</td>
          <td>17.555</td>
          <td>15.992</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>VCT</th>
          <th>2003</th>
          <td>1.010</td>
          <td>nan</td>
          <td>nan</td>
          <td>0.517</td>
          <td>17.558</td>
          <td>22.023</td>
          <td>71.954</td>
        </tr>
        <tr>
          <th>LBN</th>
          <th>2012</th>
          <td>0.953</td>
          <td>nan</td>
          <td>9.000</td>
          <td>9.728</td>
          <td>14.339</td>
          <td>nan</td>
          <td>64.885</td>
        </tr>
        <tr>
          <th>GRD</th>
          <th>2012</th>
          <td>nan</td>
          <td>nan</td>
          <td>12.000</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>DNK</th>
          <th>2001</th>
          <td>1.027</td>
          <td>nan</td>
          <td>9.000</td>
          <td>0.153</td>
          <td>9.933</td>
          <td>10.053</td>
          <td>89.477</td>
        </tr>
      </tbody>
    </table>
    </div>



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Education_WDI.pickle")
