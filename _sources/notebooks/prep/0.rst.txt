
Tourism Data Processing
=======================

DS Senior Project - Noah B Johnson - Luther College

.. code:: ipython3

    import re
    
    import numpy as np
    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

World Development Indicators
----------------------------

.. code:: ipython3

    wdi = pd.read_excel(
        "../data/external/Tourism/WDI/Data_Extract_From_World_Development_Indicators.xlsx"
    )

.. code:: ipython3

    wdi.head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Series Name</th>
          <th>Series Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>1960 [YR1960]</th>
          <th>1961 [YR1961]</th>
          <th>1962 [YR1962]</th>
          <th>1963 [YR1963]</th>
          <th>1964 [YR1964]</th>
          <th>1965 [YR1965]</th>
          <th>...</th>
          <th>2009 [YR2009]</th>
          <th>2010 [YR2010]</th>
          <th>2011 [YR2011]</th>
          <th>2012 [YR2012]</th>
          <th>2013 [YR2013]</th>
          <th>2014 [YR2014]</th>
          <th>2015 [YR2015]</th>
          <th>2016 [YR2016]</th>
          <th>2017 [YR2017]</th>
          <th>2018 [YR2018]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>International tourism, number of arrivals</td>
          <td>ST.INT.ARVL</td>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>1</th>
          <td>International tourism, number of arrivals</td>
          <td>ST.INT.ARVL</td>
          <td>Albania</td>
          <td>ALB</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>1711000</td>
          <td>2191000</td>
          <td>2469000</td>
          <td>3156000</td>
          <td>2857000</td>
          <td>3341000</td>
          <td>3784000</td>
          <td>4070000</td>
          <td>4643000</td>
          <td>..</td>
        </tr>
        <tr>
          <th>2</th>
          <td>International tourism, number of arrivals</td>
          <td>ST.INT.ARVL</td>
          <td>Algeria</td>
          <td>DZA</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>1912000</td>
          <td>2070000</td>
          <td>2395000</td>
          <td>2634000</td>
          <td>2733000</td>
          <td>2301000</td>
          <td>1710000</td>
          <td>2039000</td>
          <td>2451000</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    <p>3 rows × 63 columns</p>
    </div>



.. code:: ipython3

    wdi['Series Code'].unique()




.. parsed-literal::

    array(['ST.INT.ARVL', 'ST.INT.XPND.MP.ZS', 'ST.INT.XPND.CD',
           'ST.INT.TRNX.CD', 'ST.INT.TVLX.CD', 'ST.INT.DPRT',
           'ST.INT.RCPT.XP.ZS', 'ST.INT.RCPT.CD', 'ST.INT.TRNR.CD',
           'ST.INT.TVLR.CD', nan], dtype=object)



.. code:: ipython3

    wdi.tail(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Series Name</th>
          <th>Series Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>1960 [YR1960]</th>
          <th>1961 [YR1961]</th>
          <th>1962 [YR1962]</th>
          <th>1963 [YR1963]</th>
          <th>1964 [YR1964]</th>
          <th>1965 [YR1965]</th>
          <th>...</th>
          <th>2009 [YR2009]</th>
          <th>2010 [YR2010]</th>
          <th>2011 [YR2011]</th>
          <th>2012 [YR2012]</th>
          <th>2013 [YR2013]</th>
          <th>2014 [YR2014]</th>
          <th>2015 [YR2015]</th>
          <th>2016 [YR2016]</th>
          <th>2017 [YR2017]</th>
          <th>2018 [YR2018]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2642</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2643</th>
          <td>Data from database: World Development Indicators</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2644</th>
          <td>Last Updated: 01/30/2019</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>3 rows × 63 columns</p>
    </div>



.. code:: ipython3

    # nan is not a valid series code, so we should remove those rows
    wdi.dropna(subset=['Series Code', 'Country Code'], inplace=True)

.. code:: ipython3

    wdi.tail(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Series Name</th>
          <th>Series Code</th>
          <th>Country Name</th>
          <th>Country Code</th>
          <th>1960 [YR1960]</th>
          <th>1961 [YR1961]</th>
          <th>1962 [YR1962]</th>
          <th>1963 [YR1963]</th>
          <th>1964 [YR1964]</th>
          <th>1965 [YR1965]</th>
          <th>...</th>
          <th>2009 [YR2009]</th>
          <th>2010 [YR2010]</th>
          <th>2011 [YR2011]</th>
          <th>2012 [YR2012]</th>
          <th>2013 [YR2013]</th>
          <th>2014 [YR2014]</th>
          <th>2015 [YR2015]</th>
          <th>2016 [YR2016]</th>
          <th>2017 [YR2017]</th>
          <th>2018 [YR2018]</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2637</th>
          <td>International tourism, receipts for travel ite...</td>
          <td>ST.INT.TVLR.CD</td>
          <td>Sub-Saharan Africa (IDA &amp; IBRD countries)</td>
          <td>TSS</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>19838943841.034</td>
          <td>21673657225.577</td>
          <td>23876418124.733</td>
          <td>26142967778.798</td>
          <td>25790138383.752</td>
          <td>27057578741.885</td>
          <td>24763693256.545</td>
          <td>25325608754.148</td>
          <td>29007199323.610</td>
          <td>..</td>
        </tr>
        <tr>
          <th>2638</th>
          <td>International tourism, receipts for travel ite...</td>
          <td>ST.INT.TVLR.CD</td>
          <td>Upper middle income</td>
          <td>UMC</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>177103169507.960</td>
          <td>193953837035.759</td>
          <td>213249737962.092</td>
          <td>227425606689.724</td>
          <td>246611754348.080</td>
          <td>246280828980.337</td>
          <td>244234779637.110</td>
          <td>241924733652.200</td>
          <td>253188732331.635</td>
          <td>..</td>
        </tr>
        <tr>
          <th>2639</th>
          <td>International tourism, receipts for travel ite...</td>
          <td>ST.INT.TVLR.CD</td>
          <td>World</td>
          <td>WLD</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>893141573444.509</td>
          <td>965630203496.872</td>
          <td>1077839164714.778</td>
          <td>1114345084520.954</td>
          <td>1199717631267.226</td>
          <td>1261290553785.728</td>
          <td>1215027166077.664</td>
          <td>1238015449937.971</td>
          <td>1338751045869.408</td>
          <td>..</td>
        </tr>
      </tbody>
    </table>
    <p>3 rows × 63 columns</p>
    </div>



Pivoting the Data
~~~~~~~~~~~~~~~~~

    Target format is data by year-country with indicator columns

.. code:: ipython3

    # Making our keys
    country_codes = wdi['Country Code'].unique()
    years = wdi.columns[4:].tolist()

.. code:: ipython3

    print("We will have {} rows".format(len(country_codes) * len(years)))


.. parsed-literal::

    We will have 15576 rows


.. code:: ipython3

    """ Manual transposition of data
    """
    
    year_column = []
    country_column = []
    data_columns = {
        'ST.INT.ARVL': [],
        'ST.INT.XPND.MP.ZS': [],
        'ST.INT.XPND.CD': [],
        'ST.INT.TRNX.CD': [],
        'ST.INT.TVLX.CD': [],
        'ST.INT.DPRT': [],
        'ST.INT.RCPT.XP.ZS': [],
        'ST.INT.RCPT.CD': [],
        'ST.INT.TRNR.CD': [],
        'ST.INT.TVLR.CD': []
    }
    for country in country_codes:
        for year in years:
            year_column.append(year)
            country_column.append(country)
            for indicator in data_columns.keys():
                cdf = wdi.loc[(wdi['Country Code'] == country)]
                datum = cdf[cdf['Series Code'] == indicator][year].tolist()[0]
                data_columns[indicator].append(datum)

.. code:: ipython3

    """ Reassign country and year to columns
    """
    data_columns["Year"] = year_column
    data_columns["Country Code"] = country_column

.. code:: ipython3

    """ Data is correctly formatted
    """
    wdi_clean = pd.DataFrame(data_columns)

Cleaning data
~~~~~~~~~~~~~

    fix nans, assign correct data types, and standardize countries

.. code:: ipython3

    wdi_clean.head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>ST.INT.ARVL</th>
          <th>ST.INT.XPND.MP.ZS</th>
          <th>ST.INT.XPND.CD</th>
          <th>ST.INT.TRNX.CD</th>
          <th>ST.INT.TVLX.CD</th>
          <th>ST.INT.DPRT</th>
          <th>ST.INT.RCPT.XP.ZS</th>
          <th>ST.INT.RCPT.CD</th>
          <th>ST.INT.TRNR.CD</th>
          <th>ST.INT.TVLR.CD</th>
          <th>Year</th>
          <th>Country Code</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>1960 [YR1960]</td>
          <td>AFG</td>
        </tr>
        <tr>
          <th>1</th>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>1961 [YR1961]</td>
          <td>AFG</td>
        </tr>
        <tr>
          <th>2</th>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>1962 [YR1962]</td>
          <td>AFG</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    wdi_clean = wdi_clean.replace('..', np.NaN)

.. code:: ipython3

    wdi_clean.head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>ST.INT.ARVL</th>
          <th>ST.INT.XPND.MP.ZS</th>
          <th>ST.INT.XPND.CD</th>
          <th>ST.INT.TRNX.CD</th>
          <th>ST.INT.TVLX.CD</th>
          <th>ST.INT.DPRT</th>
          <th>ST.INT.RCPT.XP.ZS</th>
          <th>ST.INT.RCPT.CD</th>
          <th>ST.INT.TRNR.CD</th>
          <th>ST.INT.TVLR.CD</th>
          <th>Year</th>
          <th>Country Code</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>1960 [YR1960]</td>
          <td>AFG</td>
        </tr>
        <tr>
          <th>1</th>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>1961 [YR1961]</td>
          <td>AFG</td>
        </tr>
        <tr>
          <th>2</th>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>1962 [YR1962]</td>
          <td>AFG</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    """ Assign all columns except year and country to float dtype
    """
    wdi_clean[wdi_clean.columns[:-2]] = wdi_clean[wdi_clean.columns[:-2]].astype(
        float)

.. code:: ipython3

    """ Check the dtypes of the dataframe
    """
    wdi_clean.get_dtype_counts()




.. parsed-literal::

    float64    10
    object      2
    dtype: int64



.. code:: ipython3

    """ Remove the bracketed text and parse year into an integer so: '1960 [YR1960]' → int(1960)
    """
    wdi_clean["Year"] = wdi_clean["Year"].apply(lambda x: re.match(r'^\d*', x)[0]
                                                ).astype(int)

.. code:: ipython3

    """ Check year values
    """
    wdi_clean.sample(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>ST.INT.ARVL</th>
          <th>ST.INT.XPND.MP.ZS</th>
          <th>ST.INT.XPND.CD</th>
          <th>ST.INT.TRNX.CD</th>
          <th>ST.INT.TVLX.CD</th>
          <th>ST.INT.DPRT</th>
          <th>ST.INT.RCPT.XP.ZS</th>
          <th>ST.INT.RCPT.CD</th>
          <th>ST.INT.TRNR.CD</th>
          <th>ST.INT.TVLR.CD</th>
          <th>Year</th>
          <th>Country Code</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>877</th>
          <td>6732000.000</td>
          <td>6.475</td>
          <td>899000000.000</td>
          <td>181000000.000</td>
          <td>718000000.000</td>
          <td>nan</td>
          <td>7.696</td>
          <td>1766000000.000</td>
          <td>731000000.000</td>
          <td>1035000000.000</td>
          <td>2011</td>
          <td>BHR</td>
        </tr>
        <tr>
          <th>754</th>
          <td>682000.000</td>
          <td>3.244</td>
          <td>256000000.000</td>
          <td>55000000.000</td>
          <td>201000000.000</td>
          <td>1836000.000</td>
          <td>1.466</td>
          <td>201000000.000</td>
          <td>84000000.000</td>
          <td>117000000.000</td>
          <td>2006</td>
          <td>AZE</td>
        </tr>
        <tr>
          <th>3660</th>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>1962</td>
          <td>EST</td>
        </tr>
      </tbody>
    </table>
    </div>



.. code:: ipython3

    """ 
    Create a mask without regions and custom groupings, 
    selecting only valid country entries
    """
    country_bool = []
    for country in wdi_clean['Country Code'].tolist():
        try:
            pycountry.countries.lookup(country)
            country_bool.append(True)
        except LookupError:
            country_bool.append(False)

.. code:: ipython3

    len(wdi_clean['Country Code'].unique())




.. parsed-literal::

    264



.. code:: ipython3

    wdi_clean = wdi_clean[country_bool]

.. code:: ipython3

    len(wdi_clean['Country Code'].unique())




.. parsed-literal::

    215



.. code:: ipython3

    """ Standardize the country codes
    """
    country_codes = []
    for country in wdi_clean['Country Code'].tolist():
        country_codes.append(pycountry.countries.lookup(country).alpha_3)

.. code:: ipython3

    wdi_clean.loc[:, 'Country Code'] = country_codes

.. code:: ipython3

    wdi_clean.describe()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>ST.INT.ARVL</th>
          <th>ST.INT.XPND.MP.ZS</th>
          <th>ST.INT.XPND.CD</th>
          <th>ST.INT.TRNX.CD</th>
          <th>ST.INT.TVLX.CD</th>
          <th>ST.INT.DPRT</th>
          <th>ST.INT.RCPT.XP.ZS</th>
          <th>ST.INT.RCPT.CD</th>
          <th>ST.INT.TRNR.CD</th>
          <th>ST.INT.TVLR.CD</th>
          <th>Year</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>count</th>
          <td>4390.000</td>
          <td>3748.000</td>
          <td>4055.000</td>
          <td>3289.000</td>
          <td>3956.000</td>
          <td>2234.000</td>
          <td>3752.000</td>
          <td>4266.000</td>
          <td>3033.000</td>
          <td>3985.000</td>
          <td>12685.000</td>
        </tr>
        <tr>
          <th>mean</th>
          <td>4417208.200</td>
          <td>6.605</td>
          <td>4828076388.212</td>
          <td>794672287.039</td>
          <td>4228815999.141</td>
          <td>8031308.268</td>
          <td>16.952</td>
          <td>4928297940.752</td>
          <td>922708154.258</td>
          <td>4476780046.173</td>
          <td>1989.000</td>
        </tr>
        <tr>
          <th>std</th>
          <td>10272868.297</td>
          <td>4.332</td>
          <td>15399011971.733</td>
          <td>2718791242.890</td>
          <td>13733953517.299</td>
          <td>16159876.350</td>
          <td>18.848</td>
          <td>14801029019.088</td>
          <td>2995992210.148</td>
          <td>12946159292.781</td>
          <td>17.030</td>
        </tr>
        <tr>
          <th>min</th>
          <td>700.000</td>
          <td>0.183</td>
          <td>100000.000</td>
          <td>100000.000</td>
          <td>10000.000</td>
          <td>1900.000</td>
          <td>0.001</td>
          <td>100000.000</td>
          <td>11000.000</td>
          <td>100000.000</td>
          <td>1960.000</td>
        </tr>
        <tr>
          <th>25%</th>
          <td>199000.000</td>
          <td>3.696</td>
          <td>97000000.000</td>
          <td>21000000.000</td>
          <td>71000000.000</td>
          <td>486250.000</td>
          <td>4.269</td>
          <td>119250000.000</td>
          <td>17000000.000</td>
          <td>107000000.000</td>
          <td>1974.000</td>
        </tr>
        <tr>
          <th>50%</th>
          <td>800000.000</td>
          <td>5.579</td>
          <td>423000000.000</td>
          <td>87000000.000</td>
          <td>329367300.000</td>
          <td>1957000.000</td>
          <td>9.356</td>
          <td>660000000.000</td>
          <td>128000000.000</td>
          <td>578000000.000</td>
          <td>1989.000</td>
        </tr>
        <tr>
          <th>75%</th>
          <td>3513500.000</td>
          <td>8.303</td>
          <td>2628500000.000</td>
          <td>375000000.000</td>
          <td>2240000000.000</td>
          <td>7331250.000</td>
          <td>22.104</td>
          <td>3372000000.000</td>
          <td>593000000.000</td>
          <td>3204000000.000</td>
          <td>2004.000</td>
        </tr>
        <tr>
          <th>max</th>
          <td>86861000.000</td>
          <td>42.441</td>
          <td>257733000000.000</td>
          <td>38896000000.000</td>
          <td>257733000000.000</td>
          <td>143035000.000</td>
          <td>170.479</td>
          <td>251361000000.000</td>
          <td>44071000000.000</td>
          <td>210748000000.000</td>
          <td>2018.000</td>
        </tr>
      </tbody>
    </table>
    </div>



Saving Data
~~~~~~~~~~~

.. code:: ipython3

    """ Save the cleaned and standardized data
    """
    wdi_clean.to_pickle("../data/interim/WDI.pickle")
    pd.DataFrame({
        'Series Code': wdi['Series Code'].unique(),
        'Series Name': wdi['Series Name'].unique()
    }).to_pickle("../data/interim/WDI_DD.pickle")

World Tourism Organization
--------------------------

.. code:: ipython3

    uwto = pd.read_excel(
        "../data/external/Tourism/UWTO/Arrivals of non resident tourists_visitors, depart.xls"
    )

Grouping by Country
~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    """ 
    Create a mask without regions and custom groupings, 
    selecting only valid country entries
    """
    country_locations = []
    row = 0
    for country in uwto['COUNTRY']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(row)
        except LookupError:
            pass
        row += 1
    country_locations.append(len(uwto))

.. code:: ipython3

    """ Create a dataframe for each country code
    """
    country_slices = []
    for index in range(len(country_locations)):
        try:
            country_slices.append(
                [country_locations[index], country_locations[index + 1] - 1])
        except IndexError:
            pass
    nation_frames = []
    for s in country_slices:
        nation_frames.append(uwto.loc[s[0]:s[1]])

.. code:: ipython3

    """ Clean the dataframes and flatten into standard format
    """
    clean_nations = []
    
    for nation in nation_frames:
        nation = nation.reset_index()
        nation_name = nation['COUNTRY'][0]
    
        # list of row indexes indicating a chunk of data (inbound/outbound)
        chunk_headers = []
        row = 0
        for country in nation['COUNTRY']:
            if 'bound tourism' in country:
                chunk_headers.append(row)
            row += 1
    
        # New dfs on variable groups
        inbound = nation[chunk_headers[0]:chunk_headers[1]]
        outbound = nation[chunk_headers[1]:]
    
        # rename variables to flatten index
        outbound.loc[1:, 'COUNTRY'] = 'Outbound: ' + outbound[1:]['COUNTRY']
        inbound.loc[1:, 'COUNTRY'] = 'Inbound: ' + inbound[1:]['COUNTRY']
    
        # combine variable groups and remove index rows
        rejoined = pd.concat([outbound, inbound]).dropna()
    
        # move indicators to correct column
        rejoined['Indicator'] = rejoined['COUNTRY']
    
        # set the country name to the correct value
        rejoined['COUNTRY'] = nation_name
    
        # Fix column order
        rejoined = rejoined[[
            'COUNTRY', 'Indicator', 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
            2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014,
            2015, 2016, 2017
        ]]
    
        # add to clean list
        clean_nations.append(rejoined)
    
    uwto_clean = pd.concat(clean_nations)


.. parsed-literal::

    /home/travis/virtualenv/python3.7-dev/lib/python3.7/site-packages/pandas/core/indexing.py:543: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead
    
    See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
      self.obj[item] = s


Clean Values and Group Variables on Means
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    uwto_clean.head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>COUNTRY</th>
          <th>Indicator</th>
          <th>1995</th>
          <th>1996</th>
          <th>1997</th>
          <th>1998</th>
          <th>1999</th>
          <th>2000</th>
          <th>2001</th>
          <th>2002</th>
          <th>...</th>
          <th>2008</th>
          <th>2009</th>
          <th>2010</th>
          <th>2011</th>
          <th>2012</th>
          <th>2013</th>
          <th>2014</th>
          <th>2015</th>
          <th>2016</th>
          <th>2017</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>7</th>
          <td>AFGHANISTAN</td>
          <td>Outbound: Departures - Thousands</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
        </tr>
        <tr>
          <th>8</th>
          <td>AFGHANISTAN</td>
          <td>Outbound: Tourism expenditure in other countri...</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>28</td>
          <td>70</td>
          <td>106</td>
          <td>255</td>
          <td>110</td>
          <td>138</td>
          <td>140</td>
          <td>151</td>
          <td>89</td>
          <td>132</td>
        </tr>
        <tr>
          <th>9</th>
          <td>AFGHANISTAN</td>
          <td>Outbound: Travel - US$ Mn</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>..</td>
          <td>...</td>
          <td>26</td>
          <td>68</td>
          <td>103</td>
          <td>246</td>
          <td>105</td>
          <td>132</td>
          <td>137</td>
          <td>147</td>
          <td>79</td>
          <td>118</td>
        </tr>
      </tbody>
    </table>
    <p>3 rows × 25 columns</p>
    </div>



.. code:: ipython3

    """ Replace '..' with np.nan for better parsing
    """
    uwto_clean = uwto_clean.replace('..', np.NaN)

.. code:: ipython3

    uwto_clean.head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>COUNTRY</th>
          <th>Indicator</th>
          <th>1995</th>
          <th>1996</th>
          <th>1997</th>
          <th>1998</th>
          <th>1999</th>
          <th>2000</th>
          <th>2001</th>
          <th>2002</th>
          <th>...</th>
          <th>2008</th>
          <th>2009</th>
          <th>2010</th>
          <th>2011</th>
          <th>2012</th>
          <th>2013</th>
          <th>2014</th>
          <th>2015</th>
          <th>2016</th>
          <th>2017</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>7</th>
          <td>AFGHANISTAN</td>
          <td>Outbound: Departures - Thousands</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>...</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>8</th>
          <td>AFGHANISTAN</td>
          <td>Outbound: Tourism expenditure in other countri...</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>...</td>
          <td>28.000</td>
          <td>70.000</td>
          <td>106.000</td>
          <td>255.000</td>
          <td>110.000</td>
          <td>138.000</td>
          <td>140.000</td>
          <td>151.000</td>
          <td>89.000</td>
          <td>132.000</td>
        </tr>
        <tr>
          <th>9</th>
          <td>AFGHANISTAN</td>
          <td>Outbound: Travel - US$ Mn</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>...</td>
          <td>26.000</td>
          <td>68.000</td>
          <td>103.000</td>
          <td>246.000</td>
          <td>105.000</td>
          <td>132.000</td>
          <td>137.000</td>
          <td>147.000</td>
          <td>79.000</td>
          <td>118.000</td>
        </tr>
      </tbody>
    </table>
    <p>3 rows × 25 columns</p>
    </div>



.. code:: ipython3

    """ Assign all columns except indicator and country to float dtype
    """
    uwto_clean[uwto_clean.columns[2:]] = uwto_clean[uwto_clean.columns[2:]].astype(
        float)

.. code:: ipython3

    uwto_clean.get_dtype_counts()




.. parsed-literal::

    float64    23
    object      2
    dtype: int64



.. code:: ipython3

    """ Select unique
    """
    uwto_clean = uwto_clean.groupby(['COUNTRY', 'Indicator']).max()

Pivot the Data
~~~~~~~~~~~~~~

.. code:: ipython3

    # Move indicators to the columns index
    unstacked = uwto_clean.unstack()
    # Name column indexes
    unstacked.columns.names = ['Year', 'Indicator']
    # move year to row index
    restacked = unstacked.stack(level=0, dropna=False)
    # move country and year to columns
    uwto_pivoted = restacked.reset_index()
    # remove indicator label from column index
    uwto_pivoted.columns.name = None

.. code:: ipython3

    uwto_pivoted.head(3)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>COUNTRY</th>
          <th>Year</th>
          <th>Inbound: Arrivals - Thousands</th>
          <th>Inbound: Passenger transport - US$ Mn</th>
          <th>Inbound: Tourism expenditure in the country - US$ Mn</th>
          <th>Inbound: Travel - US$ Mn</th>
          <th>Outbound: Arrivals - Thousands</th>
          <th>Outbound: Departures - Thousands</th>
          <th>Outbound: Passenger transport - US$ Mn</th>
          <th>Outbound: Tourism expenditure in other countries - US$ Mn</th>
          <th>Outbound: Tourism expenditure in the country - US$ Mn</th>
          <th>Outbound: Travel - US$ Mn</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>AFGHANISTAN</td>
          <td>1995</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>1</th>
          <td>AFGHANISTAN</td>
          <td>1996</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
        <tr>
          <th>2</th>
          <td>AFGHANISTAN</td>
          <td>1997</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
          <td>nan</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    uwto_pivoted['Country Code'] = uwto_pivoted['COUNTRY'].apply(
        lambda x: pycountry.countries.lookup(x).alpha_3)

.. code:: ipython3

    uwto_pivoted.drop(columns=['COUNTRY'], inplace=True)

Save the Data
~~~~~~~~~~~~~

.. code:: ipython3

    uwto_pivoted.to_pickle("../data/interim/UWTO.pickle")
