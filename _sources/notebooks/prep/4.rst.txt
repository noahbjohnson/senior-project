
Economic Data Processing (MADDISON)
===================================

    Maddison Project Database, version 2018. Bolt, Jutta, Robert
    Inklaar, Herman de Jong and Jan Luiten van Zanden (2018), “Rebasing
    ‘Maddison’: new income comparisons and the shape of long-run
    economic development”, Maddison Project Working paper 10

Data Dictionary
---------------

+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Full data           | Data in single table                                                                                                                                                        |
+=====================+=============================================================================================================================================================================+
| countrycode         | 3-letter ISO country code                                                                                                                                                   |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| country             | Country name                                                                                                                                                                |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| year                | Year                                                                                                                                                                        |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| cgdppc              | Real GDP per capita in 2011US$, multiple benchmarks (suitable for cross-country income comparisons)                                                                         |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| rgdpnapc            | Real GDP per capita in 2011US$, 2011 benchmark (suitable for cross-country growth comparisons)                                                                              |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| pop                 | Population, mid-year (thousands)                                                                                                                                            |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| i\_cig              | 0/1/2: observation is extrapolated (0), benchmark (1), or interpolated (2)                                                                                                  |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| i\_bm               | For benchmark observations: 1: ICP PPP estimates, 2: Historical income benchmarks, 3: Real wages and urbanization, 4: Multiple of subsistence, 5: Braithwaite (1968) PPPs   |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Partial countries   | Data for selected sub-national units with long time series                                                                                                                  |
+---------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. code:: ipython3

    import pandas as pd
    import pycountry
    
    %matplotlib inline
    
    pd.set_option('display.float_format', lambda x: '%.3f' % x)

Load The File
-------------

.. code:: ipython3

    df = pd.read_excel("../data/external/Economy/MADDISON/mpd2018.xlsx",
                       sheet_name='Full data')

.. code:: ipython3

    df.sample(5)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>countrycode</th>
          <th>country</th>
          <th>year</th>
          <th>cgdppc</th>
          <th>rgdpnapc</th>
          <th>pop</th>
          <th>i_cig</th>
          <th>i_bm</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>3911</th>
          <td>CUB</td>
          <td>Cuba</td>
          <td>1950</td>
          <td>3841.000</td>
          <td>3841.000</td>
          <td>5785.000</td>
          <td>Extrapolated</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>12068</th>
          <td>MYS</td>
          <td>Malaysia</td>
          <td>1943</td>
          <td>nan</td>
          <td>nan</td>
          <td>5630.000</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3300</th>
          <td>COG</td>
          <td>Congo</td>
          <td>1986</td>
          <td>2616.000</td>
          <td>6587.000</td>
          <td>1981.000</td>
          <td>Interpolated</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>16428</th>
          <td>SUN</td>
          <td>Former USSR</td>
          <td>1929</td>
          <td>2769.000</td>
          <td>2979.000</td>
          <td>172017.000</td>
          <td>Extrapolated</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>5987</th>
          <td>FRA</td>
          <td>France</td>
          <td>1661</td>
          <td>1337.000</td>
          <td>1731.000</td>
          <td>nan</td>
          <td>Extrapolated</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    </div>



Standardize Country Codes
-------------------------

.. code:: ipython3

    """ Only Select rows with valid country codes
    """
    country_locations = []
    for country in df['countrycode']:
        try:
            pycountry.countries.lookup(country)
            country_locations.append(True)
        except LookupError:
            country_locations.append(False)
    df = df[country_locations]

Standardize Indexes
-------------------

Years (1995≤ x ≥2017)
~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    df = df[df['year'] >= 1995]
    df = df[df['year'] <= 2017]

Reindex & Rename
~~~~~~~~~~~~~~~~

.. code:: ipython3

    df.rename(
        {
            "year": "Year",
            "countrycode": "Country Code",
            "cgdppc": "Maddison GDPPC"
        },
        axis='columns',
        inplace=True)

.. code:: ipython3

    df.set_index(["Country Code", "Year"], inplace=True)

Clean Data
----------

Remove unneeded variables
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    df.drop(["country", "i_cig", "i_bm", "rgdpnapc", "pop"],
            axis='columns',
            inplace=True)

Data Types
~~~~~~~~~~

.. code:: ipython3

    df.dtypes




.. parsed-literal::

    Maddison GDPPC    float64
    dtype: object



Save Data
---------

.. code:: ipython3

    df.to_pickle("../data/processed/Economic_MADDISON.pickle")
